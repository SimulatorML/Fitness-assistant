import logging
from collections import defaultdict
from datetime import datetime
from typing import List, Tuple, Dict, Optional

from fastapi import HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from langchain_core.prompts import ChatPromptTemplate
from llm.models import llm
from src.services.user_service import get_user_by_telegram_id
from src.services.llm_service import send_request_to_llm  # ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å
from src.database.models import Action
from src.schemas.action import ActionType, ActionCreate

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
SYSTEM_PROMPT = """
You are an AI fitness assistant. Your job is to provide users with expert-level fitness, nutrition, and workout recommendations.
You should personalize responses based on the user's fitness level, goals, and other relevant details.
Be precise, encouraging, and professional. Keep answers concise but informative.
"""

# In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ (–≤ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
chat_history_store: Dict[int, List[Tuple[str, str]]] = defaultdict(list)


async def get_user_info_dict(user_id: int, session: AsyncSession) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        user_info = await get_user_by_id(user_id, session)
        return user_info.model_dump() if user_info else None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return None


async def format_user_info(user_info: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞."""
    activities = user_info.get("preferred_activities", [])
    activities_str = ", ".join(activities) if activities else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    birth_date = user_info.get("birth_date", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    if isinstance(birth_date, datetime):
        birth_date = birth_date.strftime("%d.%m.%Y")

    return (
        f"–ò–º—è: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n"
        f"–ü–æ–ª: {user_info.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–†–æ—Å—Ç: {user_info.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
        f"–í–µ—Å: {user_info.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
        f"–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_info.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–¶–µ–ª—å: {user_info.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user_info.get('health_restrictions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activities_str}\n"
    )


async def format_chat_history(chat_history: List[Tuple[str, str]]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è LLM."""
    return "\n".join(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_msg}\n–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {ai_msg}" for user_msg, ai_msg in chat_history)


async def process_fitness_query(user_query: str, user_id: int, session: AsyncSession) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM, –¥–æ–±–∞–≤–ª—è—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ `send_request_to_llm()` –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info_dict = await get_user_info_dict(user_id, session)
    if not user_info_dict:
        raise HTTPException(status_code=404, detail="User not found")

    formatted_user_info = await format_user_info(user_info_dict)
    formatted_history = await format_chat_history(chat_history_store[user_id])

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
    prompt_template = ChatPromptTemplate.from_template(
        f"{SYSTEM_PROMPT}\n\nUser Info:\n{{user_info}}\n\nChat History:\n{{chat_history}}\n\nUser Query: {{user_query}}\n\n"
    )
    prompt = prompt_template.format(
        user_info=formatted_user_info,
        chat_history=formatted_history,
        user_query=user_query,
    )

    logging.info(f"üìù –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM: {user_query}")
    try:
        # ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ `llm_service`
        ai_response = await send_request_to_llm(prompt)
        logging.info("‚úÖ LLM —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history_store[user_id].append((user_query, ai_response.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")))

        return ai_response.get("response", "–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ LLM: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
