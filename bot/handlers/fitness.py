import logging
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from bot.states.user_states import UserForm
from bot.keyboards.inline import (gender_keyboard, activity_level_keyboard,
                                    goal_keyboard, confirm_keyboard, health_restrictions_keyboard, activities_keyboard)
from bot.utils.api_client import FitnessAPIClient
from datetime import datetime

router = Router()
api_client = FitnessAPIClient()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def format_profile_text(user_data: dict) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    activities = user_data.get('preferred_activities', [])
    activities_str = ', '.join(activities) if activities else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

    profile_text = (
        "üìã –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"üë§ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_data.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üßç‚Äç‚ôÇÔ∏è –ü–æ–ª: {user_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìè –†–æ—Å—Ç: {user_data.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Å–º\n"
        f"‚öñÔ∏è –í–µ—Å: {user_data.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –∫–≥\n"
        f"ü§∏ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {user_data.get('activity_level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéØ –¶–µ–ª—å: {user_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"ü©∫ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {user_data.get('health_restrictions', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèÉ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {activities_str}\n"
    )
    return profile_text

# --- –ù–∞—á–∞–ª–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (/profile) ---
@router.message(Command("profile"), StateFilter(None))
async def cmd_profile(message: Message, state: FSMContext):
    await message.answer('üìù –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å!\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?', reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserForm.name)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ ---
@router.message(StateFilter(UserForm.name), F.text.isalpha())
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f'–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n'
                            f'–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì', reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserForm.birth_date)

@router.message(StateFilter(UserForm.name))
async def process_name_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ---
@router.message(StateFilter(UserForm.birth_date))
async def process_birth_date(message: Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        if date_obj > datetime.now():
            raise ValueError
        await state.update_data(birth_date=message.text)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard())
        await state.set_state(UserForm.gender)
    except ValueError:
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–∞ ---
@router.callback_query(StateFilter(UserForm.gender))
async def process_gender(callback_query: CallbackQuery, state: FSMContext):
    await state.update_data(gender=callback_query.data)
    await callback_query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175)')
    await state.set_state(UserForm.height)
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ—Å—Ç–∞ ---
@router.message(StateFilter(UserForm.height), F.text.isdigit(), lambda message: 100 <= int(message.text) <= 250)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70)', reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserForm.weight)

@router.message(StateFilter(UserForm.height))
async def process_height_invalid(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–º (–æ—Ç 100 –¥–æ 250)')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ ---
@router.message(StateFilter(UserForm.weight), F.text.isdigit(), lambda message: 30 <= int(message.text) <= 300)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', reply_markup=activity_level_keyboard())
    await state.set_state(UserForm.activity_level)

@router.message(StateFilter(UserForm.weight))
async def process_weight_invalid(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–≥ (–æ—Ç 30 –¥–æ 300)')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
@router.callback_query(StateFilter(UserForm.activity_level))
async def process_activity_level(callback_query: CallbackQuery, state: FSMContext):
    activity_map = {'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π', 'intermediate': '–°—Ä–µ–¥–Ω–∏–π', 'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}
    await state.update_data(activity_level=activity_map.get(callback_query.data))
    await callback_query.message.edit_text('üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:', reply_markup=goal_keyboard())
    await state.set_state(UserForm.goal)
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ ---
@router.callback_query(StateFilter(UserForm.goal))
async def process_goal(callback_query: CallbackQuery, state: FSMContext):
    goal_map = {'weight_loss': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ', 'muscle_gain': '–ù–∞–±–æ—Ä –º–∞—Å—Å—ã', 'maintenance': '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã'}
    await state.update_data(goal=goal_map.get(callback_query.data))
    await callback_query.message.edit_text('–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∑–¥–æ—Ä–æ–≤—å—é?', reply_markup=health_restrictions_keyboard())
    await state.set_state(UserForm.health_restrictions)
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (–≤—ã–±–æ—Ä) ---
@router.callback_query(StateFilter(UserForm.health_restrictions))
async def process_restrictions_choice(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'has_restrictions':
        await callback_query.message.edit_text('–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:')
        await state.set_state(UserForm.health_restrictions)
    else:
        await state.update_data(health_restrictions='–ù–µ—Ç')
        await show_activities_selection(callback_query.message, state)
    await callback_query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∑–¥–æ—Ä–æ–≤—å—é (—Ç–µ–∫—Å—Ç) ---
@router.message(StateFilter(UserForm.health_restrictions), F.text)
async def process_restrictions_text(message: Message, state: FSMContext):
    await state.update_data(health_restrictions=message.text)
    await show_activities_selection(message, state)

@router.message(StateFilter(UserForm.health_restrictions))
async def process_restrictions_text_invalid(message: Message, state: FSMContext):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º")

# --- –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π ---
async def show_activities_selection(message: Message, state: FSMContext):
    await message.answer('üèÉ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:', reply_markup=activities_keyboard())
    await state.set_state(UserForm.select_activities)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π ---
@router.callback_query(StateFilter(UserForm.select_activities))
async def process_activity(callback_query: CallbackQuery, state: FSMContext):
    # –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    await state.finish()  # –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await callback_query.answer()