import logging
from fastapi import FastAPI
from api.routers import router
from src.database.connection import close_db, engine
from src.database.models import Base
from sqlalchemy import text
from api.routers import router


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(title="Fitness Assistant API", version="1.0")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.include_router(router)

@app.on_event("startup")
async def startup_event():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏ —Å–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã."""
    try:
        async with engine.connect() as conn:
            await conn.execute(text("SELECT 1"))
        logging.info("‚úÖ Database connection successful.")

        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        logging.info("‚úÖ Database tables created successfully.")

    except Exception as e:
        logging.error(f"‚ùå Database connection failed: {e}", exc_info=True)

@app.on_event("shutdown")
async def shutdown_event():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î."""
    await close_db()
    logging.info("üîÑ Database connection closed.")

@app.get("/", tags=["Health Check"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è API."""
    return {"message": "üöÄ Fitness Assistant API is running!"}

@app.get("/health", tags=["Health"])
async def health_check():
    return {"status": "ok"}
